#include <gtk/gtk.h>

static void quitButtonClicked(__attribute__((unused)) GtkWidget *widget,
			      __attribute__((unused)) gpointer data)
{
	g_print("%s called.\n", __FUNCTION__);
	gtk_main_quit();
}

gboolean windowDelete(__attribute__((unused)) GtkWidget *widget,
		      __attribute__((unused)) GdkEvent *event,
		      __attribute__((unused)) gpointer data)
{
	g_print("%s called.\n", __FUNCTION__);
	return TRUE;
	// Returning TRUE doesn't allow the window to close but
	// returning FALSE will
}

int main(int argc, char **argv) {

	GtkWidget *window;

	GtkWidget *buttonBox;

	GtkWidget *quitBtn;
	GtkWidget *testBtn;

	gtk_init(&argc, &argv);
	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);

	
	buttonBox = gtk_button_box_new(GTK_ORIENTATION_VERTICAL);
	gtk_container_add(GTK_CONTAINER(window), buttonBox);

	
	// Buttons and stuff here
	
	quitBtn = gtk_button_new_with_label("QUIT");
	gtk_container_add(GTK_CONTAINER(buttonBox), quitBtn);

	testBtn = gtk_button_new_with_label("TEST");
	gtk_container_add(GTK_CONTAINER(buttonBox), testBtn);

	g_signal_connect(quitBtn, "clicked", G_CALLBACK(quitButtonClicked), NULL);
	g_signal_connect(window, "delete_event", G_CALLBACK(windowDelete), NULL);

	gtk_widget_show_all(window);
	gtk_main();

	return 0;

}
